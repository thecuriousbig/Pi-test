// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"
	domains "pi/internal/core/domains"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: _a0, _a1
func (_m *UserService) CreateUser(_a0 context.Context, _a1 *domains.CreateUserRequest) (*domains.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domains.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.CreateUserRequest) (*domains.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domains.CreateUserRequest) *domains.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domains.CreateUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *domains.CreateUserRequest
func (_e *UserService_Expecter) CreateUser(_a0 interface{}, _a1 interface{}) *UserService_CreateUser_Call {
	return &UserService_CreateUser_Call{Call: _e.mock.On("CreateUser", _a0, _a1)}
}

func (_c *UserService_CreateUser_Call) Run(run func(_a0 context.Context, _a1 *domains.CreateUserRequest)) *UserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domains.CreateUserRequest))
	})
	return _c
}

func (_c *UserService_CreateUser_Call) Return(_a0 *domains.User, _a1 error) *UserService_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_CreateUser_Call) RunAndReturn(run func(context.Context, *domains.CreateUserRequest) (*domains.User, error)) *UserService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *UserService) Delete(_a0 context.Context, _a1 uint) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UserService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uint
func (_e *UserService_Expecter) Delete(_a0 interface{}, _a1 interface{}) *UserService_Delete_Call {
	return &UserService_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *UserService_Delete_Call) Run(run func(_a0 context.Context, _a1 uint)) *UserService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *UserService_Delete_Call) Return(_a0 error) *UserService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_Delete_Call) RunAndReturn(run func(context.Context, uint) error) *UserService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: _a0, _a1
func (_m *UserService) GetUserByID(_a0 context.Context, _a1 uint) (*domains.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domains.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*domains.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *domains.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UserService_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uint
func (_e *UserService_Expecter) GetUserByID(_a0 interface{}, _a1 interface{}) *UserService_GetUserByID_Call {
	return &UserService_GetUserByID_Call{Call: _e.mock.On("GetUserByID", _a0, _a1)}
}

func (_c *UserService_GetUserByID_Call) Run(run func(_a0 context.Context, _a1 uint)) *UserService_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *UserService_GetUserByID_Call) Return(_a0 *domains.User, _a1 error) *UserService_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUserByID_Call) RunAndReturn(run func(context.Context, uint) (*domains.User, error)) *UserService_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserService) Update(_a0 context.Context, _a1 uint, _a2 *domains.UpdateUserRequest) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, *domains.UpdateUserRequest) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UserService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uint
//   - _a2 *domains.UpdateUserRequest
func (_e *UserService_Expecter) Update(_a0 interface{}, _a1 interface{}, _a2 interface{}) *UserService_Update_Call {
	return &UserService_Update_Call{Call: _e.mock.On("Update", _a0, _a1, _a2)}
}

func (_c *UserService_Update_Call) Run(run func(_a0 context.Context, _a1 uint, _a2 *domains.UpdateUserRequest)) *UserService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(*domains.UpdateUserRequest))
	})
	return _c
}

func (_c *UserService_Update_Call) Return(_a0 error) *UserService_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_Update_Call) RunAndReturn(run func(context.Context, uint, *domains.UpdateUserRequest) error) *UserService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
