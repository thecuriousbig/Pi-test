// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"
	domains "pi/internal/core/domains"

	mock "github.com/stretchr/testify/mock"
)

// UserCacheRepository is an autogenerated mock type for the UserCacheRepository type
type UserCacheRepository struct {
	mock.Mock
}

type UserCacheRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserCacheRepository) EXPECT() *UserCacheRepository_Expecter {
	return &UserCacheRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *UserCacheRepository) Delete(_a0 context.Context, _a1 uint) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserCacheRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UserCacheRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uint
func (_e *UserCacheRepository_Expecter) Delete(_a0 interface{}, _a1 interface{}) *UserCacheRepository_Delete_Call {
	return &UserCacheRepository_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *UserCacheRepository_Delete_Call) Run(run func(_a0 context.Context, _a1 uint)) *UserCacheRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *UserCacheRepository_Delete_Call) Return(_a0 error) *UserCacheRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserCacheRepository_Delete_Call) RunAndReturn(run func(context.Context, uint) error) *UserCacheRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *UserCacheRepository) GetByID(_a0 context.Context, _a1 uint) (*domains.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domains.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*domains.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *domains.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserCacheRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type UserCacheRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uint
func (_e *UserCacheRepository_Expecter) GetByID(_a0 interface{}, _a1 interface{}) *UserCacheRepository_GetByID_Call {
	return &UserCacheRepository_GetByID_Call{Call: _e.mock.On("GetByID", _a0, _a1)}
}

func (_c *UserCacheRepository_GetByID_Call) Run(run func(_a0 context.Context, _a1 uint)) *UserCacheRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *UserCacheRepository_GetByID_Call) Return(_a0 *domains.User, _a1 error) *UserCacheRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserCacheRepository_GetByID_Call) RunAndReturn(run func(context.Context, uint) (*domains.User, error)) *UserCacheRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *UserCacheRepository) Update(_a0 context.Context, _a1 *domains.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserCacheRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UserCacheRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *domains.User
func (_e *UserCacheRepository_Expecter) Update(_a0 interface{}, _a1 interface{}) *UserCacheRepository_Update_Call {
	return &UserCacheRepository_Update_Call{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *UserCacheRepository_Update_Call) Run(run func(_a0 context.Context, _a1 *domains.User)) *UserCacheRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domains.User))
	})
	return _c
}

func (_c *UserCacheRepository_Update_Call) Return(_a0 error) *UserCacheRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserCacheRepository_Update_Call) RunAndReturn(run func(context.Context, *domains.User) error) *UserCacheRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserCacheRepository creates a new instance of UserCacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserCacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserCacheRepository {
	mock := &UserCacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
